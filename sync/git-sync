#!/usr/bin/env python3

import argparse
import subprocess
import sys


def run_command(*arg, shell=True):
    """Run a shell command and return its output."""
    stdout = subprocess.check_output(*arg, shell=shell, stderr=subprocess.STDOUT)
    return stdout.decode('utf-8').strip()


class Remote(object):
  def __init__(self, name):
    remote_url = run_command("git config --get remote.%s.url" % name)
    self.host, self.path = [ s for s in remote_url.split(':') ]
    self.name = name

  def __str__(self):
    return "'%s' at %s:%s" % (self.name, self.host, self.path)

  def run_command(self, command, shell=True):
    return run_command("ssh %s \"cd %s && %s\"" %
                       (self.host, self.path, command), shell=shell)


def parse_command_line():
  parser = argparse.ArgumentParser()
  parser.add_argument("remotes", nargs="*", default=["origin"],
                      help="The remotes with which to synchronize with. "
                           "If left unspecified, the 'origin' remote is used.")
  parser.add_argument("-c", "--command",
                      help="Shell command to run after sync.")
  return parser.parse_args()


def main(argv):
  args = parse_command_line()

  for remote_name in args.remotes:
    remote = Remote(remote_name)
    branch = run_command("git rev-parse --abbrev-ref HEAD")

    if branch == 'master':
      print("Cannot synchronize master branch.", file=sys.stderr)
      return -1

    print("Synchronizing local branch '%s' onto remote %s." % (branch, remote))

    remote.run_command("git co HEAD@{0}")
    print(run_command("git push --force %s %s:%s" %
                       (remote_name, branch, branch)))
    remote.run_command("git co %s" % branch)

    if args.command:
      print(remote.run_command(args.command))


if __name__ == "__main__":
  sys.exit(main(sys.argv))
