#!/usr/bin/env python3
"""
git-rp (recursive push) - Push to main repository and all subtrees

This script pushes changes to both the main repository and any configured git subtrees
in a single command. It reads subtree configuration from your .git/config file.

Setup:
------
Add subtree configuration to your .git/config file for each subtree in your repository:

    [subtree "path/to/subtree/dir"]
        url = https://github.com/user/repo.git
        branch = main

Where:
- "path/to/subtree/dir" is the relative path to the subtree directory in your repository
- url is the remote repository URL for the subtree
- branch is the target branch in the subtree repository (defaults to 'main' if not specified)

Usage:
------
    git-rp                    # Push current branch to origin and all subtrees
    git-rp -b feature-branch  # Push specific branch
    git-rp -f                 # Force push
    git-rp -n                 # Dry run - show what would be pushed

Example .git/config:
--------------------
    [core]
        repositoryformatversion = 0
        filemode = true
    [remote "origin"]
        url = git@github.com:myuser/main-repo.git
        fetch = +refs/heads/*:refs/remotes/origin/*
    [subtree "lib/shared-library"]
        url = git@github.com:myuser/shared-library.git
        branch = main
    [subtree "vendor/third-party"]
        url = https://github.com/other/third-party.git
        branch = master

This configuration would push to:
1. The main repository (origin)
2. The shared-library subtree at lib/shared-library
3. The third-party subtree at vendor/third-party
"""

import argparse
import configparser
import os
import re
import subprocess
import sys

import util


def parse_command_line():
    parser = argparse.ArgumentParser(description="Recursively push to main repository and all subtrees")
    parser.add_argument("-b", "--branch", 
                        help="Branch to push (default: current branch)")
    parser.add_argument("-f", "--force", action="store_true",
                        help="Force push")
    parser.add_argument("-n", "--dry-run", action="store_true",
                        help="Show what would be pushed without actually pushing")
    return parser.parse_args()


def get_current_branch():
    return util.run_command("git rev-parse --abbrev-ref HEAD")


def get_subtrees_from_config():
    """Parse .git/config to find all subtree configurations"""
    try:
        git_dir = util.run_command("git rev-parse --git-dir")
        config_path = os.path.join(git_dir, "config")
    except subprocess.CalledProcessError:
        print("Error: Not in a git repository", file=sys.stderr)
        sys.exit(1)
    
    config = configparser.ConfigParser()
    config.read(config_path)
    
    subtrees = []
    for section in config.sections():
        match = re.match(r'^subtree "(.*)"$', section)
        if match:
            path = match.group(1)
            if 'url' in config[section]:
                subtrees.append({
                    'path': path,
                    'url': config[section]['url'],
                    'branch': config[section].get('branch', 'main')
                })
    
    return subtrees


def push_main_repo(branch, force=False, dry_run=False, cwd=None):
    """Push the main repository"""
    cmd = ["git", "push"]
    if force:
        cmd.append("--force")
    cmd.extend(["origin", branch])
    
    if dry_run:
        print(f"[DRY RUN] Would execute: {' '.join(cmd)}")
        return True
    
    return subprocess.run(cmd, cwd=cwd).returncode == 0


def get_nested_subtrees(parent_path, cwd):
    """Check if a subtree has its own nested subtrees"""
    subtree_git_dir = os.path.join(cwd, parent_path, '.git')
    
    # Check if this subtree has its own .git directory
    if not os.path.exists(subtree_git_dir):
        return []
    
    # If it's a file (submodule), not a directory, skip it
    if os.path.isfile(subtree_git_dir):
        return []
    
    config_path = os.path.join(subtree_git_dir, 'config')
    if not os.path.exists(config_path):
        return []
    
    config = configparser.ConfigParser()
    config.read(config_path)
    
    nested_subtrees = []
    for section in config.sections():
        match = re.match(r'^subtree "(.*)"$', section)
        if match:
            nested_path = match.group(1)
            if 'url' in config[section]:
                nested_subtrees.append({
                    'path': os.path.join(parent_path, nested_path),
                    'url': config[section]['url'],
                    'branch': config[section].get('branch', 'main'),
                    'relative_path': nested_path
                })
    
    return nested_subtrees


def push_subtree(subtree, branch, force=False, dry_run=False, cwd=None, level=0):
    """Push a single subtree and recursively push any nested subtrees"""
    path = subtree['path']
    url = subtree['url']
    subtree_branch = subtree['branch']
    
    indent = "  " * level
    print(f"\n{indent}Pushing subtree '{path}' to {url} (branch: {subtree_branch})...")
    
    # First push this subtree
    if force:
        # git subtree doesn't support --force directly, need to use push --force
        if dry_run:
            print(f"{indent}[DRY RUN] Would execute: git subtree split --prefix={path}")
            print(f"{indent}[DRY RUN] Would execute: git push --force {url} <split-commit>:{subtree_branch}")
        else:
            # Get the split commit - need to capture stdout only, not stderr
            split_cmd = ["git", "subtree", "split", f"--prefix={path}"]
            result = subprocess.run(split_cmd, capture_output=True, text=True, cwd=cwd)
            if result.returncode != 0:
                print(f"{indent}Error splitting subtree: {result.stderr}", file=sys.stderr)
                return False
            split_commit = result.stdout.strip()
            
            # Push with force
            cmd = ["git", "push", "--force", url, f"{split_commit}:{subtree_branch}"]
            if subprocess.run(cmd, cwd=cwd).returncode != 0:
                return False
    else:
        # Normal subtree push
        cmd = ["git", "subtree", "push", f"--prefix={path}", url, subtree_branch]
        
        if dry_run:
            print(f"{indent}[DRY RUN] Would execute: {' '.join(cmd)}")
        else:
            if subprocess.run(cmd, cwd=cwd).returncode != 0:
                return False
    
    # Now check for nested subtrees within this subtree
    nested_subtrees = get_nested_subtrees(path, cwd)
    if nested_subtrees:
        print(f"{indent}Found {len(nested_subtrees)} nested subtree(s) in '{path}'")
        for nested in nested_subtrees:
            # For nested subtrees, we need to push from within the parent subtree's context
            # This requires some special handling
            if not push_nested_subtree(nested, subtree, branch, force, dry_run, cwd, level + 1):
                return False
    
    return True


def push_nested_subtree(nested, parent_subtree, branch, force=False, dry_run=False, cwd=None, level=0):
    """Push a nested subtree (subtree within a subtree)"""
    indent = "  " * level
    relative_path = nested['relative_path']
    url = nested['url']
    nested_branch = nested['branch']
    
    print(f"\n{indent}Pushing nested subtree '{relative_path}' within '{parent_subtree['path']}' to {url} (branch: {nested_branch})...")
    
    # We need to work within the parent subtree's repository
    parent_path = os.path.join(cwd, parent_subtree['path'])
    
    if force:
        if dry_run:
            print(f"{indent}[DRY RUN] Would execute: cd {parent_path} && git subtree split --prefix={relative_path}")
            print(f"{indent}[DRY RUN] Would execute: cd {parent_path} && git push --force {url} <split-commit>:{nested_branch}")
        else:
            # Get the split commit from within the parent subtree
            split_cmd = ["git", "subtree", "split", f"--prefix={relative_path}"]
            result = subprocess.run(split_cmd, capture_output=True, text=True, cwd=parent_path)
            if result.returncode != 0:
                print(f"{indent}Error splitting nested subtree: {result.stderr}", file=sys.stderr)
                return False
            split_commit = result.stdout.strip()
            
            # Push with force
            cmd = ["git", "push", "--force", url, f"{split_commit}:{nested_branch}"]
            if subprocess.run(cmd, cwd=parent_path).returncode != 0:
                return False
    else:
        # Normal subtree push from within parent
        cmd = ["git", "subtree", "push", f"--prefix={relative_path}", url, nested_branch]
        
        if dry_run:
            print(f"{indent}[DRY RUN] Would execute: cd {parent_path} && {' '.join(cmd)}")
        else:
            if subprocess.run(cmd, cwd=parent_path).returncode != 0:
                return False
    
    # Check if this nested subtree has its own nested subtrees (go deeper!)
    even_more_nested = get_nested_subtrees(nested['path'], cwd)
    if even_more_nested:
        print(f"{indent}Found {len(even_more_nested)} nested subtree(s) in '{nested['path']}'")
        for deeper in even_more_nested:
            if not push_nested_subtree(deeper, nested, branch, force, dry_run, cwd, level + 1):
                return False
    
    return True


def main(argv):
    args = parse_command_line()
    
    # Get repository root for git subtree commands
    try:
        repo_root = util.run_command("git rev-parse --show-toplevel")
    except subprocess.CalledProcessError:
        print("Error: Not in a git repository", file=sys.stderr)
        return 1
    
    # Get current branch if not specified
    branch = args.branch or get_current_branch()
    
    # Get subtree configurations
    subtrees = get_subtrees_from_config()
    
    # Push main repository
    if not push_main_repo(branch, args.force, args.dry_run, cwd=repo_root):
        return 1
    
    # Push all subtrees (with recursive handling of nested subtrees)
    for subtree in subtrees:
        if not push_subtree(subtree, branch, args.force, args.dry_run, cwd=repo_root, level=0):
            return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv))